#include <iostream>
#include <vector>
#include <queue>
#include <unordered_set>

using namespace std;

int main() {
    int memorySize, pageSize, numPages, numReferences;
    cout << "Enter memory size (number of frames): ";
    cin >> memorySize;
    cout << "Enter page size: ";
    cin >> pageSize;

    numPages = memorySize / pageSize;
    
    cout << "Enter the number of page references: ";
    cin >> numReferences;

    vector<int> pageReferences(numReferences);
    cout << "Enter page references: ";
    for (int i = 0; i < numReferences; ++i) {
        cin >> pageReferences[i];
    }

    queue<int> pageQueue; // FIFO queue to track pages in memory
    unordered_set<int> pageSet; // Set to quickly check if a page is in memory
    int pageFaults = 0;

    cout << "Page Replacement Policy: FIFO" << endl;
    cout << "Page Reference Sequence:" << endl;

    for (int i = 0; i < numReferences; ++i) {
        int page = pageReferences[i];
        cout << "Reference " << i + 1 << ": Page " << page << " - ";

        if (pageSet.find(page) == pageSet.end()) {
            if (pageQueue.size() == numPages) {
                int removedPage = pageQueue.front();
                pageQueue.pop();
                pageSet.erase(removedPage);
                cout << "Page " << removedPage << " removed from memory. ";

            }
            pageQueue.push(page);
            pageSet.insert(page);
            cout << "Page " << page << " loaded into memory. ";
            ++pageFaults;
        }

        cout << "Current Pages in Memory: [ ";
        queue<int> tempQueue = pageQueue;
        while (!tempQueue.empty()) {
            cout << tempQueue.front() << " ";
            tempQueue.pop();
        }
        cout << "]" << endl;
    }

    cout << "Total Page Faults: " << pageFaults << endl;

    return 0;
}