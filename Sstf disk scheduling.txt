#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>

using namespace std;

int main() {
    int n; // Number of disk requests
    cout << "Enter the number of disk requests: ";
    cin >> n;

    vector<int> requests(n); // Array to store disk requests
    cout << "Enter the disk request queue:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> requests[i];
    }

    int head; // Initial position of the disk head
    cout << "Enter the initial position of the disk head: ";
    cin >> head;

    // Perform SSTF disk scheduling
    vector<bool> visited(n, false);
    int totalMovement = 0;

    cout << "Sequence of disk head movement:" << endl;
    for (int i = 0; i < n; i++) {
        int minDistance = INT_MAX;
        int nextRequest = -1;

        // Find the request with the shortest seek time
        for (int j = 0; j < n; j++) {
            if (!visited[j]) {
                int distance = abs(head - requests[j]);
                if (distance < minDistance) {
                    minDistance = distance;
                    nextRequest = j;
                }
            }
        }

        if (nextRequest != -1) {
            visited[nextRequest] = true;
            totalMovement += minDistance;
            cout << "Move from " << head << " to " << requests[nextRequest] << " (Distance: " << minDistance << ")" << endl;
            head = requests[nextRequest];
        }
    }

    cout << "Total head movement: " << totalMovement << endl;

    return 0;
}