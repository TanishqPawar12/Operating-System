#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int main() {
    int n; // Number of disk requests
    cout << "Enter the number of disk requests: ";
    cin >> n;

    vector<int> requests(n); // Array to store disk requests
    cout << "Enter the disk request queue:" << endl;
    for (int i = 0; i < n; i++) {
        cin >> requests[i];
    }

    int head; // Initial position of the disk head
    cout << "Enter the initial position of the disk head: ";
    cin >> head;

    int direction; // 1 for right, -1 for left
    cout << "Enter the direction (1 for right, -1 for left): ";
    cin >> direction;

    // Perform LOOK disk scheduling
    int totalMovement = 0;

    cout << "Sequence of disk head movement:" << endl;

    // Sort the requests depending on the direction
    if (direction == 1) {
        sort(requests.begin(), requests.end());
    } else if (direction == -1) {
        sort(requests.begin(), requests.end(), greater<int>());
    } else {
        cout << "Invalid direction. Please enter 1 or -1." << endl;
        return 1;
    }

    // Find the index where head is currently located
    int currentIndex = 0;
    for (int i = 0; i < n; i++) {
        if (requests[i] == head) {
            currentIndex = i;
            break;
        }
    }

    // Move in the selected direction
    for (int i = currentIndex; i < n && i >= 0; i += direction) {
        int movement = abs(requests[i] - head);
        totalMovement += movement;
        cout << "Move from " << head << " to " << requests[i] << " (Distance: " << movement << ")" << endl;
        head = requests[i];
    }

    cout << "Total head movement: " << totalMovement << endl;

    return 0;
}