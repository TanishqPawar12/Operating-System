#include <iostream>
#include <vector>
#include <unordered_map>
#include <list>

using namespace std;

int main() {
    int memorySize, pageSize, numPages, numReferences;
    cout << "Enter memory size (number of frames): ";
    cin >> memorySize;
    cout << "Enter page size: ";
    cin >> pageSize;

    numPages = memorySize / pageSize;
    
    cout << "Enter the number of page references: ";
    cin >> numReferences;

    vector<int> pageReferences(numReferences);
    cout << "Enter page references: ";
    for (int i = 0; i < numReferences; ++i) {
        cin >> pageReferences[i];
    }

    list<int> pageList; // Doubly linked list to track pages in memory based on LRU
    unordered_map<int, list<int>::iterator> pageMap; // Map to store page numbers and their positions in the list
    int pageFaults = 0;

    cout << "Page Replacement Policy: LRU" << endl;
    cout << "Page Reference Sequence:" << endl;

    for (int i = 0; i < numReferences; ++i) {
        int page = pageReferences[i];
        cout << "Reference " << i + 1 << ": Page " << page << " - ";

        if (pageMap.find(page) == pageMap.end()) {
            if (pageList.size() == numPages) {
                int lruPage = pageList.back();
                pageList.pop_back();
                pageMap.erase(lruPage);
                cout << "Page " << lruPage << " removed from memory. ";
            }

            pageList.push_front(page);
            pageMap[page] = pageList.begin();
            cout << "Page " << page << " loaded into memory. ";
            ++pageFaults;
        } else {
            // Page is already in memory; update its position to the front of the list
            pageList.erase(pageMap[page]);
            pageList.push_front(page);
            pageMap[page] = pageList.begin();
            cout << "Page " << page << " already in memory. ";
        }

        cout << "Current Pages in Memory: [ ";
        for (const auto& pageNum : pageList) {
            cout << pageNum << " ";
        }
        cout << "]" << endl;
    }

    cout << "Total Page Faults: " << pageFaults << endl;

    return 0;
}