#include <iostream>
#include <vector>
#include <unordered_map>
#include <queue>

using namespace std;

int main() {
    int memorySize, pageSize, numPages, numReferences;
    cout << "Enter memory size (number of frames): ";
    cin >> memorySize;
    cout << "Enter page size: ";
    cin >> pageSize;

    numPages = memorySize / pageSize;

    cout << "Enter the number of page references: ";
    cin >> numReferences;

    vector<int> pageReferences(numReferences);
    cout << "Enter page references: ";
    for (int i = 0; i < numReferences; ++i) {
        cin >> pageReferences[i];
    }

    unordered_map<int, queue<int>> pageMap; // Map to store page numbers and their positions in the reference list
    int pageFaults = 0;

    cout << "Page Replacement Policy: Optimal" << endl;
    cout << "Page Reference Sequence:" << endl;

    for (int i = 0; i < numReferences; ++i) {
        int page = pageReferences[i];
        cout << "Reference " << i + 1 << ": Page " << page << " - ";

        // Check if the page is already in memory
        if (pageMap.find(page) != pageMap.end() && !pageMap[page].empty()) {
            cout << "Page " << page << " already in memory. ";
        } else {
            // Page is not in memory, so we need to replace a page
            ++pageFaults;

            // If there is space in memory, just load the page
            if (pageMap.size() < numPages) {
                pageMap[page] = queue<int>();
            } else {
                // Find the page that will be used furthest in the future
                int pageToReplace = -1;
                int maxDistance = -1;

                for (const auto& entry : pageMap) {
                    int nextPageIndex = i + 1;
                    while (nextPageIndex < numReferences) {
                        if (pageReferences[nextPageIndex] == entry.first) {
                            if (nextPageIndex > maxDistance) {
                                maxDistance = nextPageIndex;
                                pageToReplace = entry.first;
                            }
                            break;
                        }
                        ++nextPageIndex;
                    }

                    if (nextPageIndex == numReferences) {
                        // This page won't be used anymore; replace it
                        pageToReplace = entry.first;
                        break;
                    }
                }

                pageMap.erase(pageToReplace);
            }

            pageMap[page] = queue<int>();
        }

        // Update the future references for each page in memory
        for (auto& entry : pageMap) {
            int pageInMemory = entry.first;
            int nextPageIndex = i + 1;
            while (nextPageIndex < numReferences) {
                if (pageReferences[nextPageIndex] == pageInMemory) {
                    entry.second.push(nextPageIndex);
                    break;
                }
                ++nextPageIndex;
            }
        }

        cout << "Current Pages in Memory: [ ";
        for (const auto& entry : pageMap) {
            cout << entry.first << " ";
        }
        cout << "]" << endl;
    }

    cout << "Total Page Faults: " << pageFaults << endl;

    return 0;
}