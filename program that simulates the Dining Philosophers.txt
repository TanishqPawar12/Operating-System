#include <iostream>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

using namespace std;

const int NUM_PHILOSOPHERS = 5;

sem_t forks[NUM_PHILOSOPHERS];
sem_t mutex;

void* philosopher(void* arg) {
    int id = ((int)arg);
    int left_fork = id;
    int right_fork = (id + 1) % NUM_PHILOSOPHERS;

    while (true) {
        // Think for a while
        cout << "Philosopher " << id << " is thinking." << endl;
        usleep(rand() % 1000000); // Sleep to simulate thinking time

        // Try to pick up forks
        sem_wait(&mutex);
        sem_wait(&forks[left_fork]);
        sem_wait(&forks[right_fork]);
        sem_post(&mutex);

        // Eat
        cout << "Philosopher " << id << " is eating." << endl;
        usleep(rand() % 1000000); // Sleep to simulate eating time

        // Release forks
        sem_post(&forks[left_fork]);
        sem_post(&forks[right_fork]);

        // Finish eating
        cout << "Philosopher " << id << " finished eating." << endl;
    }
}

int main() {
    pthread_t philosophers[NUM_PHILOSOPHERS];
    int philosopher_ids[NUM_PHILOSOPHERS];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_init(&forks[i], 0, 1);
    }

    // Create philosopher threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        philosopher_ids[i] = i;
        pthread_create(&philosophers[i], NULL, philosopher, &philosopher_ids[i]);
    }

    // Join threads
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        pthread_join(philosophers[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    for (int i = 0; i < NUM_PHILOSOPHERS; i++) {
        sem_destroy(&forks[i]);
    }

    return 0;
}